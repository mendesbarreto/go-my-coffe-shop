// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: barista.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BaristaService_GetMenu_FullMethodName = "/api.v1.mycoffeshop.barista.BaristaService/GetMenu"
	BaristaService_Order_FullMethodName   = "/api.v1.mycoffeshop.barista.BaristaService/Order"
)

// BaristaServiceClient is the client API for BaristaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BaristaServiceClient interface {
	GetMenu(ctx context.Context, in *GetMenuRequest, opts ...grpc.CallOption) (*GetMenuResponse, error)
	Order(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderResponse, error)
}

type baristaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBaristaServiceClient(cc grpc.ClientConnInterface) BaristaServiceClient {
	return &baristaServiceClient{cc}
}

func (c *baristaServiceClient) GetMenu(ctx context.Context, in *GetMenuRequest, opts ...grpc.CallOption) (*GetMenuResponse, error) {
	out := new(GetMenuResponse)
	err := c.cc.Invoke(ctx, BaristaService_GetMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baristaServiceClient) Order(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderResponse, error) {
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, BaristaService_Order_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BaristaServiceServer is the server API for BaristaService service.
// All implementations must embed UnimplementedBaristaServiceServer
// for forward compatibility
type BaristaServiceServer interface {
	GetMenu(context.Context, *GetMenuRequest) (*GetMenuResponse, error)
	Order(context.Context, *OrderRequest) (*OrderResponse, error)
	mustEmbedUnimplementedBaristaServiceServer()
}

// UnimplementedBaristaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBaristaServiceServer struct {
}

func (UnimplementedBaristaServiceServer) GetMenu(context.Context, *GetMenuRequest) (*GetMenuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenu not implemented")
}
func (UnimplementedBaristaServiceServer) Order(context.Context, *OrderRequest) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Order not implemented")
}
func (UnimplementedBaristaServiceServer) mustEmbedUnimplementedBaristaServiceServer() {}

// UnsafeBaristaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BaristaServiceServer will
// result in compilation errors.
type UnsafeBaristaServiceServer interface {
	mustEmbedUnimplementedBaristaServiceServer()
}

func RegisterBaristaServiceServer(s grpc.ServiceRegistrar, srv BaristaServiceServer) {
	s.RegisterService(&BaristaService_ServiceDesc, srv)
}

func _BaristaService_GetMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaristaServiceServer).GetMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaristaService_GetMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaristaServiceServer).GetMenu(ctx, req.(*GetMenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaristaService_Order_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaristaServiceServer).Order(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaristaService_Order_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaristaServiceServer).Order(ctx, req.(*OrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BaristaService_ServiceDesc is the grpc.ServiceDesc for BaristaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BaristaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.mycoffeshop.barista.BaristaService",
	HandlerType: (*BaristaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMenu",
			Handler:    _BaristaService_GetMenu_Handler,
		},
		{
			MethodName: "Order",
			Handler:    _BaristaService_Order_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "barista.proto",
}
